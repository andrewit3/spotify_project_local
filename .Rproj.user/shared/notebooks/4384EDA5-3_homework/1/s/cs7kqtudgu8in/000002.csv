"0",""
"0","distF <- function(x,y){"
"0","  return(sqrt(sum((x-y)^2)))"
"0","}"
"0","centroidF <- function(X,K,clusters){"
"0","  return(sapply(split(X,clusters),colMeans))"
"0","}"
"0","leastDistInd <- function(x, Xc){"
"0","  # Returns the index of the point x is closet to in Xc"
"0","  # Xc is matrix of centroids with them ordered appropriately"
"0","  distVec <- apply(FUN = distF,X = Xc,MARGIN = 2,x)"
"0","  return(which.min(distVec))"
"0","}"
"0",""
"0","KmeansMine <- function(X,K,tol = 1, maxIter = 20){"
"0","  n = nrow(X)"
"0","#### Answer 1.1 Complete this code"
"0","  currentClusters <-  sample(x = K,size = n,replace = T)"
"0","  change = tol + 1"
"0","  iter = 0"
"0","  while(change >= tol & iter < maxIter){"
"0","    oldClusters <-  currentClusters"
"0","    centroids <- centroidF(X, K, currentClusters)"
"0","    currentClusters <- apply(FUN = leastDistInd,X = X,MARGIN = 1,centroids)"
"0","    change <- sum(currentClusters != oldClusters)"
"0","    iter = iter + 1"
"0","  }"
"0","  return(currentClusters)"
"0","}"
