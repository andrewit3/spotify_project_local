"0","checkNumberItersF = function(ntrees = 5, tolParm = 1, maxIter = 10, verbose = 0){"
"0","  ###"
"0","  # tolParm: iterations will continue until the percent decrease"
"0","  #          is less than tolParm"
"0","  ###"
"0","  misClassOut   = list()"
"0","  totalTreesOut = list()"
"0","  "
"0","  n              = nrow(X)"
"0","  votes          = matrix(0,nrow=n,ncol=2)"
"0","  totalTrees     = 0"
"0","  iterations     = 0"
"0","  misClassOld   = 1"
"0","  while(iterations < maxIter){"
"0","    votes[is.nan(votes)] = 0"
"0","    iterations    = iterations + 1"
"0","    totalTrees    = totalTrees + ntrees"
"0","    if(verbose >= 2){cat('Total trees: ',totalTrees,'\n')}"
"0","    outRf        = randomForest(X, Y,ntree = ntrees)"
"0","    "
"0","    oob.times        = outRf$oob.times"
"0","    votes_iterations = outRf$votes*oob.times"
"0","    votes[oob.times>0,] = matrix(votes + votes_iterations,nrow=n)[oob.times>0,]"
"0","    if(min(apply(votes,1,sum)) == 0){next}"
"0","    "
"0","    Yhat          = apply(votes,1,which.max) - 1"
"0","    misClassNew  = misClass(Yhat,Y,produceOutput = TRUE)"
"0","    misClassOut[[iterations]]   = misClassNew"
"0","    totalTreesOut[[iterations]] = totalTrees"
"0","    percentChange = 100*(misClassNew - misClassOld)/misClassOld"
"0","    if(verbose >= 1){cat('% change: ',percentChange,'\n')}"
"0","    if(percentChange > -tolParm){break}"
"0","    misClassOld = misClassNew"
"0","  }"
"0","  if(iterations == maxIter){"
"0","    stop(""too many iterations, try a larger ntrees or maxIter value"")"
"0","  }"
"0","  return(list('misClass' = unlist(misClassOut),"
"0","              'totalTree' = unlist(totalTreesOut)))"
"0","}"
