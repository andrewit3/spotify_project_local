"0","lambdaGrid            = c(.0001,.1,1,10)"
"0","interaction.depthGrid = c(4,5,6)"
"0","n.treesGrid           = c(500,1000)"
"0","resultsGrid           = array(0,dim=c(length(lambdaGrid), "
"0","                                      length(interaction.depthGrid),"
"0","                                      length(n.treesGrid)),"
"0","                              dimnames = list('lambda'=as.character(lambdaGrid),"
"0","                                              'interaction'=as.character(interaction.depthGrid),"
"0","                                              'n.trees'=as.character(n.treesGrid)))"
"0","resultsBoost          = list('bernoulli' = resultsGrid,"
"0","                             'adaboost'  = resultsGrid)"
"0",""
"0","set.seed(1)"
"0","verbose = 0"
"0","Ychar   = as.character(Y) # gbm doesn't accept factor Y"
"0","Ychar_0 = as.character(Y_0)"
"0","for(distribution in c('bernoulli','adaboost')){"
"0","  lamIter = 0"
"0","  for(lambda in lambdaGrid){"
"0","    lamIter = lamIter + 1"
"0","    intIter = 0"
"0","    for(interaction.depth in interaction.depthGrid){"
"0","      intIter  = intIter + 1"
"0","      treeIter = 0"
"0","      for(n.trees in n.treesGrid){"
"0","        treeIter = treeIter + 1"
"0","        boostOut = gbm(Ychar~.,data=X,"
"0","                        n.trees=n.trees, interaction.depth=interaction.depth,"
"0","                        shrinkage=lambda, distribution = distribution)"
"0","        fHat  = predict(boostOut,X_0,n.trees=n.trees)"
"0","        Yhat = rep(0,nrow(X_0))"
"0","        Yhat[fHat > 0] = 1"
"0","        "
"0","        Yhat = as.factor(Yhat)"
"0","        if(verbose > 0){"
"0","        cat('lambda = ',lambda,' interaction.depth = ',interaction.depth, ' lambda = ',lambda,' n.trees = ',n.trees,'\n')"
"0","        }"
"0","        if(verbose > 1){"
"0","          misClass(Yhat,Ychar_0)"
"0","        }"
"0","        resultsBoost[[distribution]][lamIter,intIter,treeIter] = misClass(Yhat,Ychar_0, produceOutput = TRUE)"
"0","      }"
"0","    }"
"0","  }"
"0","}"
"0","resultsBoost"
"1","$bernoulli
"
"1",", "
"1",", n.trees = 500"
"1","

"
"1","       interaction
"
"1","lambda "
"1","          4"
"1","          5"
"1","          6"
"1","
  1e-04"
"1"," 0.45934959"
"1"," 0.45934959"
"1"," 0.45934959"
"1","
  0.1  "
"1"," 0.03658537"
"1"," 0.04065041"
"1"," 0.04065041"
"1","
  1    "
"1"," 0.08943089"
"1"," 0.06910569"
"1"," 0.08130081"
"1","
  10   "
"1"," 0.78455285"
"1"," 0.78455285"
"1"," 0.47967480"
"1","
"
"1","
"
"1",", "
"1",", n.trees = 1000"
"1","

"
"1","       interaction
"
"1","lambda "
"1","          4"
"1","          5"
"1","          6"
"1","
  1e-04"
"1"," 0.45934959"
"1"," 0.45934959"
"1"," 0.45934959"
"1","
  0.1  "
"1"," 0.03658537"
"1"," 0.02439024"
"1"," 0.02439024"
"1","
  1    "
"1"," 0.07723577"
"1"," 0.07723577"
"1"," 0.07317073"
"1","
  10   "
"1"," 0.46747967"
"1"," 0.58536585"
"1"," 0.21544715"
"1","
"
"1","
"
"1","
"
"1","$adaboost
"
"1",", "
"1",", n.trees = 500"
"1","

"
"1","       interaction
"
"1","lambda "
"1","          4"
"1","          5"
"1","          6"
"1","
  1e-04"
"1"," 0.45934959"
"1"," 0.45934959"
"1"," 0.45934959"
"1","
  0.1  "
"1"," 0.02845528"
"1"," 0.02845528"
"1"," 0.02439024"
"1","
  1    "
"1"," 0.03658537"
"1"," 0.03658537"
"1"," 0.04065041"
"1","
  10   "
"1"," 0.47154472"
"1"," 0.45934959"
"1"," 0.35365854"
"1","
"
"1","
"
"1",", "
"1",", n.trees = 1000"
"1","

"
"1","       interaction
"
"1","lambda "
"1","          4"
"1","          5"
"1","          6"
"1","
  1e-04"
"1"," 0.45934959"
"1"," 0.45934959"
"1"," 0.45934959"
"1","
  0.1  "
"1"," 0.02439024"
"1"," 0.02845528"
"1"," 0.02845528"
"1","
  1    "
"1"," 0.04471545"
"1"," 0.03252033"
"1"," 0.04471545"
"1","
  10   "
"1"," 0.36991870"
"1"," 0.28048780"
"1"," 0.13008130"
"1","
"
"1","
"
"1","
"
